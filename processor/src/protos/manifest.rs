// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `manifest.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Manifest {
    // message fields
    pub injectables: ::protobuf::RepeatedField<Injectable>,
    pub components: ::protobuf::RepeatedField<Component>,
    pub merged_crates: ::protobuf::RepeatedField<::std::string::String>,
    pub modules: ::protobuf::RepeatedField<Module>,
    pub component_module_manifests: ::protobuf::RepeatedField<ComponentModuleManifest>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Manifest {
    fn default() -> &'a Manifest {
        <Manifest as ::protobuf::Message>::default_instance()
    }
}

impl Manifest {
    pub fn new() -> Manifest {
        ::std::default::Default::default()
    }

    // repeated .Injectable injectables = 1;


    pub fn get_injectables(&self) -> &[Injectable] {
        &self.injectables
    }
    pub fn clear_injectables(&mut self) {
        self.injectables.clear();
    }

    // Param is passed by value, moved
    pub fn set_injectables(&mut self, v: ::protobuf::RepeatedField<Injectable>) {
        self.injectables = v;
    }

    // Mutable pointer to the field.
    pub fn mut_injectables(&mut self) -> &mut ::protobuf::RepeatedField<Injectable> {
        &mut self.injectables
    }

    // Take field
    pub fn take_injectables(&mut self) -> ::protobuf::RepeatedField<Injectable> {
        ::std::mem::replace(&mut self.injectables, ::protobuf::RepeatedField::new())
    }

    // repeated .Component components = 2;


    pub fn get_components(&self) -> &[Component] {
        &self.components
    }
    pub fn clear_components(&mut self) {
        self.components.clear();
    }

    // Param is passed by value, moved
    pub fn set_components(&mut self, v: ::protobuf::RepeatedField<Component>) {
        self.components = v;
    }

    // Mutable pointer to the field.
    pub fn mut_components(&mut self) -> &mut ::protobuf::RepeatedField<Component> {
        &mut self.components
    }

    // Take field
    pub fn take_components(&mut self) -> ::protobuf::RepeatedField<Component> {
        ::std::mem::replace(&mut self.components, ::protobuf::RepeatedField::new())
    }

    // repeated string merged_crates = 3;


    pub fn get_merged_crates(&self) -> &[::std::string::String] {
        &self.merged_crates
    }
    pub fn clear_merged_crates(&mut self) {
        self.merged_crates.clear();
    }

    // Param is passed by value, moved
    pub fn set_merged_crates(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.merged_crates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_merged_crates(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.merged_crates
    }

    // Take field
    pub fn take_merged_crates(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.merged_crates, ::protobuf::RepeatedField::new())
    }

    // repeated .Module modules = 4;


    pub fn get_modules(&self) -> &[Module] {
        &self.modules
    }
    pub fn clear_modules(&mut self) {
        self.modules.clear();
    }

    // Param is passed by value, moved
    pub fn set_modules(&mut self, v: ::protobuf::RepeatedField<Module>) {
        self.modules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_modules(&mut self) -> &mut ::protobuf::RepeatedField<Module> {
        &mut self.modules
    }

    // Take field
    pub fn take_modules(&mut self) -> ::protobuf::RepeatedField<Module> {
        ::std::mem::replace(&mut self.modules, ::protobuf::RepeatedField::new())
    }

    // repeated .ComponentModuleManifest component_module_manifests = 5;


    pub fn get_component_module_manifests(&self) -> &[ComponentModuleManifest] {
        &self.component_module_manifests
    }
    pub fn clear_component_module_manifests(&mut self) {
        self.component_module_manifests.clear();
    }

    // Param is passed by value, moved
    pub fn set_component_module_manifests(&mut self, v: ::protobuf::RepeatedField<ComponentModuleManifest>) {
        self.component_module_manifests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_component_module_manifests(&mut self) -> &mut ::protobuf::RepeatedField<ComponentModuleManifest> {
        &mut self.component_module_manifests
    }

    // Take field
    pub fn take_component_module_manifests(&mut self) -> ::protobuf::RepeatedField<ComponentModuleManifest> {
        ::std::mem::replace(&mut self.component_module_manifests, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Manifest {
    fn is_initialized(&self) -> bool {
        for v in &self.injectables {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.components {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.modules {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.component_module_manifests {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.injectables)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.components)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.merged_crates)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.modules)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.component_module_manifests)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.injectables {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.components {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.merged_crates {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.modules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.component_module_manifests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.injectables {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.components {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.merged_crates {
            os.write_string(3, &v)?;
        };
        for v in &self.modules {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.component_module_manifests {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Manifest {
        Manifest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Injectable>>(
                "injectables",
                |m: &Manifest| { &m.injectables },
                |m: &mut Manifest| { &mut m.injectables },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Component>>(
                "components",
                |m: &Manifest| { &m.components },
                |m: &mut Manifest| { &mut m.components },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "merged_crates",
                |m: &Manifest| { &m.merged_crates },
                |m: &mut Manifest| { &mut m.merged_crates },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Module>>(
                "modules",
                |m: &Manifest| { &m.modules },
                |m: &mut Manifest| { &mut m.modules },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ComponentModuleManifest>>(
                "component_module_manifests",
                |m: &Manifest| { &m.component_module_manifests },
                |m: &mut Manifest| { &mut m.component_module_manifests },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Manifest>(
                "Manifest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Manifest {
        static instance: ::protobuf::rt::LazyV2<Manifest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Manifest::new)
    }
}

impl ::protobuf::Clear for Manifest {
    fn clear(&mut self) {
        self.injectables.clear();
        self.components.clear();
        self.merged_crates.clear();
        self.modules.clear();
        self.component_module_manifests.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Manifest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Manifest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Injectable {
    // message fields
    field_crate: ::protobuf::SingularField<::std::string::String>,
    pub field_type: ::protobuf::SingularPtrField<Type>,
    pub fields: ::protobuf::RepeatedField<Field>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Injectable {
    fn default() -> &'a Injectable {
        <Injectable as ::protobuf::Message>::default_instance()
    }
}

impl Injectable {
    pub fn new() -> Injectable {
        ::std::default::Default::default()
    }

    // optional string crate = 1;


    pub fn get_field_crate(&self) -> &str {
        match self.field_crate.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_field_crate(&mut self) {
        self.field_crate.clear();
    }

    pub fn has_field_crate(&self) -> bool {
        self.field_crate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_crate(&mut self, v: ::std::string::String) {
        self.field_crate = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_crate(&mut self) -> &mut ::std::string::String {
        if self.field_crate.is_none() {
            self.field_crate.set_default();
        }
        self.field_crate.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_crate(&mut self) -> ::std::string::String {
        self.field_crate.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .Type type = 2;


    pub fn get_field_type(&self) -> &Type {
        self.field_type.as_ref().unwrap_or_else(|| <Type as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Type) {
        self.field_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut Type {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> Type {
        self.field_type.take().unwrap_or_else(|| Type::new())
    }

    // repeated .Field fields = 3;


    pub fn get_fields(&self) -> &[Field] {
        &self.fields
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::protobuf::RepeatedField<Field>) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fields(&mut self) -> &mut ::protobuf::RepeatedField<Field> {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::protobuf::RepeatedField<Field> {
        ::std::mem::replace(&mut self.fields, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Injectable {
    fn is_initialized(&self) -> bool {
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.field_crate)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_crate.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.field_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_crate.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.fields {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Injectable {
        Injectable::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "crate",
                |m: &Injectable| { &m.field_crate },
                |m: &mut Injectable| { &mut m.field_crate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "type",
                |m: &Injectable| { &m.field_type },
                |m: &mut Injectable| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Field>>(
                "fields",
                |m: &Injectable| { &m.fields },
                |m: &mut Injectable| { &mut m.fields },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Injectable>(
                "Injectable",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Injectable {
        static instance: ::protobuf::rt::LazyV2<Injectable> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Injectable::new)
    }
}

impl ::protobuf::Clear for Injectable {
    fn clear(&mut self) {
        self.field_crate.clear();
        self.field_type.clear();
        self.fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Injectable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Injectable {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Field {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    pub field_type: ::protobuf::SingularPtrField<Type>,
    injected: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Field {
    fn default() -> &'a Field {
        <Field as ::protobuf::Message>::default_instance()
    }
}

impl Field {
    pub fn new() -> Field {
        ::std::default::Default::default()
    }

    // optional string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .Type type = 2;


    pub fn get_field_type(&self) -> &Type {
        self.field_type.as_ref().unwrap_or_else(|| <Type as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Type) {
        self.field_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut Type {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> Type {
        self.field_type.take().unwrap_or_else(|| Type::new())
    }

    // optional bool injected = 3;


    pub fn get_injected(&self) -> bool {
        self.injected.unwrap_or(false)
    }
    pub fn clear_injected(&mut self) {
        self.injected = ::std::option::Option::None;
    }

    pub fn has_injected(&self) -> bool {
        self.injected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_injected(&mut self, v: bool) {
        self.injected = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Field {
    fn is_initialized(&self) -> bool {
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.injected = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.field_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.injected {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.injected {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Field {
        Field::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Field| { &m.name },
                |m: &mut Field| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "type",
                |m: &Field| { &m.field_type },
                |m: &mut Field| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "injected",
                |m: &Field| { &m.injected },
                |m: &mut Field| { &mut m.injected },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Field>(
                "Field",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Field {
        static instance: ::protobuf::rt::LazyV2<Field> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Field::new)
    }
}

impl ::protobuf::Clear for Field {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type.clear();
        self.injected = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Field {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Component {
    // message fields
    pub field_type: ::protobuf::SingularPtrField<Type>,
    pub provisions: ::protobuf::RepeatedField<Dependency>,
    pub module_manifest: ::protobuf::SingularPtrField<Type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Component {
    fn default() -> &'a Component {
        <Component as ::protobuf::Message>::default_instance()
    }
}

impl Component {
    pub fn new() -> Component {
        ::std::default::Default::default()
    }

    // optional .Type type = 1;


    pub fn get_field_type(&self) -> &Type {
        self.field_type.as_ref().unwrap_or_else(|| <Type as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Type) {
        self.field_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut Type {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> Type {
        self.field_type.take().unwrap_or_else(|| Type::new())
    }

    // repeated .Dependency provisions = 2;


    pub fn get_provisions(&self) -> &[Dependency] {
        &self.provisions
    }
    pub fn clear_provisions(&mut self) {
        self.provisions.clear();
    }

    // Param is passed by value, moved
    pub fn set_provisions(&mut self, v: ::protobuf::RepeatedField<Dependency>) {
        self.provisions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_provisions(&mut self) -> &mut ::protobuf::RepeatedField<Dependency> {
        &mut self.provisions
    }

    // Take field
    pub fn take_provisions(&mut self) -> ::protobuf::RepeatedField<Dependency> {
        ::std::mem::replace(&mut self.provisions, ::protobuf::RepeatedField::new())
    }

    // optional .Type module_manifest = 3;


    pub fn get_module_manifest(&self) -> &Type {
        self.module_manifest.as_ref().unwrap_or_else(|| <Type as ::protobuf::Message>::default_instance())
    }
    pub fn clear_module_manifest(&mut self) {
        self.module_manifest.clear();
    }

    pub fn has_module_manifest(&self) -> bool {
        self.module_manifest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_module_manifest(&mut self, v: Type) {
        self.module_manifest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module_manifest(&mut self) -> &mut Type {
        if self.module_manifest.is_none() {
            self.module_manifest.set_default();
        }
        self.module_manifest.as_mut().unwrap()
    }

    // Take field
    pub fn take_module_manifest(&mut self) -> Type {
        self.module_manifest.take().unwrap_or_else(|| Type::new())
    }
}

impl ::protobuf::Message for Component {
    fn is_initialized(&self) -> bool {
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.provisions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.module_manifest {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.provisions)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.module_manifest)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.provisions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.module_manifest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.provisions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.module_manifest.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Component {
        Component::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "type",
                |m: &Component| { &m.field_type },
                |m: &mut Component| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Dependency>>(
                "provisions",
                |m: &Component| { &m.provisions },
                |m: &mut Component| { &mut m.provisions },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "module_manifest",
                |m: &Component| { &m.module_manifest },
                |m: &mut Component| { &mut m.module_manifest },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Component>(
                "Component",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Component {
        static instance: ::protobuf::rt::LazyV2<Component> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Component::new)
    }
}

impl ::protobuf::Clear for Component {
    fn clear(&mut self) {
        self.field_type.clear();
        self.provisions.clear();
        self.module_manifest.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Component {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Component {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ComponentModuleManifest {
    // message fields
    pub field_type: ::protobuf::SingularPtrField<Type>,
    pub builder_modules: ::protobuf::RepeatedField<Dependency>,
    pub modules: ::protobuf::RepeatedField<Type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ComponentModuleManifest {
    fn default() -> &'a ComponentModuleManifest {
        <ComponentModuleManifest as ::protobuf::Message>::default_instance()
    }
}

impl ComponentModuleManifest {
    pub fn new() -> ComponentModuleManifest {
        ::std::default::Default::default()
    }

    // optional .Type type = 1;


    pub fn get_field_type(&self) -> &Type {
        self.field_type.as_ref().unwrap_or_else(|| <Type as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Type) {
        self.field_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut Type {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> Type {
        self.field_type.take().unwrap_or_else(|| Type::new())
    }

    // repeated .Dependency builder_modules = 2;


    pub fn get_builder_modules(&self) -> &[Dependency] {
        &self.builder_modules
    }
    pub fn clear_builder_modules(&mut self) {
        self.builder_modules.clear();
    }

    // Param is passed by value, moved
    pub fn set_builder_modules(&mut self, v: ::protobuf::RepeatedField<Dependency>) {
        self.builder_modules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_builder_modules(&mut self) -> &mut ::protobuf::RepeatedField<Dependency> {
        &mut self.builder_modules
    }

    // Take field
    pub fn take_builder_modules(&mut self) -> ::protobuf::RepeatedField<Dependency> {
        ::std::mem::replace(&mut self.builder_modules, ::protobuf::RepeatedField::new())
    }

    // repeated .Type modules = 3;


    pub fn get_modules(&self) -> &[Type] {
        &self.modules
    }
    pub fn clear_modules(&mut self) {
        self.modules.clear();
    }

    // Param is passed by value, moved
    pub fn set_modules(&mut self, v: ::protobuf::RepeatedField<Type>) {
        self.modules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_modules(&mut self) -> &mut ::protobuf::RepeatedField<Type> {
        &mut self.modules
    }

    // Take field
    pub fn take_modules(&mut self) -> ::protobuf::RepeatedField<Type> {
        ::std::mem::replace(&mut self.modules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ComponentModuleManifest {
    fn is_initialized(&self) -> bool {
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.builder_modules {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.modules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.builder_modules)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.modules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.builder_modules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.modules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.builder_modules {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.modules {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ComponentModuleManifest {
        ComponentModuleManifest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "type",
                |m: &ComponentModuleManifest| { &m.field_type },
                |m: &mut ComponentModuleManifest| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Dependency>>(
                "builder_modules",
                |m: &ComponentModuleManifest| { &m.builder_modules },
                |m: &mut ComponentModuleManifest| { &mut m.builder_modules },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "modules",
                |m: &ComponentModuleManifest| { &m.modules },
                |m: &mut ComponentModuleManifest| { &mut m.modules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ComponentModuleManifest>(
                "ComponentModuleManifest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ComponentModuleManifest {
        static instance: ::protobuf::rt::LazyV2<ComponentModuleManifest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ComponentModuleManifest::new)
    }
}

impl ::protobuf::Clear for ComponentModuleManifest {
    fn clear(&mut self) {
        self.field_type.clear();
        self.builder_modules.clear();
        self.modules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ComponentModuleManifest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComponentModuleManifest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Dependency {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    pub field_type: ::protobuf::SingularPtrField<Type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Dependency {
    fn default() -> &'a Dependency {
        <Dependency as ::protobuf::Message>::default_instance()
    }
}

impl Dependency {
    pub fn new() -> Dependency {
        ::std::default::Default::default()
    }

    // optional string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .Type type = 2;


    pub fn get_field_type(&self) -> &Type {
        self.field_type.as_ref().unwrap_or_else(|| <Type as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Type) {
        self.field_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut Type {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> Type {
        self.field_type.take().unwrap_or_else(|| Type::new())
    }
}

impl ::protobuf::Message for Dependency {
    fn is_initialized(&self) -> bool {
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.field_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Dependency {
        Dependency::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Dependency| { &m.name },
                |m: &mut Dependency| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "type",
                |m: &Dependency| { &m.field_type },
                |m: &mut Dependency| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Dependency>(
                "Dependency",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Dependency {
        static instance: ::protobuf::rt::LazyV2<Dependency> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Dependency::new)
    }
}

impl ::protobuf::Clear for Dependency {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Dependency {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dependency {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Type {
    // message fields
    root: ::std::option::Option<Type_Root>,
    path: ::protobuf::SingularField<::std::string::String>,
    field_crate: ::protobuf::SingularField<::std::string::String>,
    pub args: ::protobuf::RepeatedField<Type>,
    trait_object: ::std::option::Option<bool>,
    field_ref: ::std::option::Option<bool>,
    pub scopes: ::protobuf::RepeatedField<Type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Type {
    fn default() -> &'a Type {
        <Type as ::protobuf::Message>::default_instance()
    }
}

impl Type {
    pub fn new() -> Type {
        ::std::default::Default::default()
    }

    // optional .Type.Root root = 1;


    pub fn get_root(&self) -> Type_Root {
        self.root.unwrap_or(Type_Root::UNSPECIFIED)
    }
    pub fn clear_root(&mut self) {
        self.root = ::std::option::Option::None;
    }

    pub fn has_root(&self) -> bool {
        self.root.is_some()
    }

    // Param is passed by value, moved
    pub fn set_root(&mut self, v: Type_Root) {
        self.root = ::std::option::Option::Some(v);
    }

    // optional string path = 2;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string crate = 3;


    pub fn get_field_crate(&self) -> &str {
        match self.field_crate.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_field_crate(&mut self) {
        self.field_crate.clear();
    }

    pub fn has_field_crate(&self) -> bool {
        self.field_crate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_crate(&mut self, v: ::std::string::String) {
        self.field_crate = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_crate(&mut self) -> &mut ::std::string::String {
        if self.field_crate.is_none() {
            self.field_crate.set_default();
        }
        self.field_crate.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_crate(&mut self) -> ::std::string::String {
        self.field_crate.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .Type args = 4;


    pub fn get_args(&self) -> &[Type] {
        &self.args
    }
    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::protobuf::RepeatedField<Type>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_args(&mut self) -> &mut ::protobuf::RepeatedField<Type> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::protobuf::RepeatedField<Type> {
        ::std::mem::replace(&mut self.args, ::protobuf::RepeatedField::new())
    }

    // optional bool trait_object = 5;


    pub fn get_trait_object(&self) -> bool {
        self.trait_object.unwrap_or(false)
    }
    pub fn clear_trait_object(&mut self) {
        self.trait_object = ::std::option::Option::None;
    }

    pub fn has_trait_object(&self) -> bool {
        self.trait_object.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trait_object(&mut self, v: bool) {
        self.trait_object = ::std::option::Option::Some(v);
    }

    // optional bool ref = 6;


    pub fn get_field_ref(&self) -> bool {
        self.field_ref.unwrap_or(false)
    }
    pub fn clear_field_ref(&mut self) {
        self.field_ref = ::std::option::Option::None;
    }

    pub fn has_field_ref(&self) -> bool {
        self.field_ref.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_ref(&mut self, v: bool) {
        self.field_ref = ::std::option::Option::Some(v);
    }

    // repeated .Type scopes = 7;


    pub fn get_scopes(&self) -> &[Type] {
        &self.scopes
    }
    pub fn clear_scopes(&mut self) {
        self.scopes.clear();
    }

    // Param is passed by value, moved
    pub fn set_scopes(&mut self, v: ::protobuf::RepeatedField<Type>) {
        self.scopes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_scopes(&mut self) -> &mut ::protobuf::RepeatedField<Type> {
        &mut self.scopes
    }

    // Take field
    pub fn take_scopes(&mut self) -> ::protobuf::RepeatedField<Type> {
        ::std::mem::replace(&mut self.scopes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Type {
    fn is_initialized(&self) -> bool {
        for v in &self.args {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.scopes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.root, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.field_crate)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.args)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.trait_object = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.field_ref = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.scopes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.root {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.field_crate.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.trait_object {
            my_size += 2;
        }
        if let Some(v) = self.field_ref {
            my_size += 2;
        }
        for value in &self.scopes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.root {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.field_crate.as_ref() {
            os.write_string(3, &v)?;
        }
        for v in &self.args {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.trait_object {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.field_ref {
            os.write_bool(6, v)?;
        }
        for v in &self.scopes {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Type {
        Type::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Type_Root>>(
                "root",
                |m: &Type| { &m.root },
                |m: &mut Type| { &mut m.root },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &Type| { &m.path },
                |m: &mut Type| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "crate",
                |m: &Type| { &m.field_crate },
                |m: &mut Type| { &mut m.field_crate },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "args",
                |m: &Type| { &m.args },
                |m: &mut Type| { &mut m.args },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "trait_object",
                |m: &Type| { &m.trait_object },
                |m: &mut Type| { &mut m.trait_object },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ref",
                |m: &Type| { &m.field_ref },
                |m: &mut Type| { &mut m.field_ref },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "scopes",
                |m: &Type| { &m.scopes },
                |m: &mut Type| { &mut m.scopes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Type>(
                "Type",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Type {
        static instance: ::protobuf::rt::LazyV2<Type> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Type::new)
    }
}

impl ::protobuf::Clear for Type {
    fn clear(&mut self) {
        self.root = ::std::option::Option::None;
        self.path.clear();
        self.field_crate.clear();
        self.args.clear();
        self.trait_object = ::std::option::Option::None;
        self.field_ref = ::std::option::Option::None;
        self.scopes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Type {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Type_Root {
    UNSPECIFIED = 0,
    GLOBAL = 1,
    CRATE = 2,
    PRIMITIVE = 3,
}

impl ::protobuf::ProtobufEnum for Type_Root {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Type_Root> {
        match value {
            0 => ::std::option::Option::Some(Type_Root::UNSPECIFIED),
            1 => ::std::option::Option::Some(Type_Root::GLOBAL),
            2 => ::std::option::Option::Some(Type_Root::CRATE),
            3 => ::std::option::Option::Some(Type_Root::PRIMITIVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Type_Root] = &[
            Type_Root::UNSPECIFIED,
            Type_Root::GLOBAL,
            Type_Root::CRATE,
            Type_Root::PRIMITIVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Type_Root>("Type.Root", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Type_Root {
}

impl ::std::default::Default for Type_Root {
    fn default() -> Self {
        Type_Root::UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Type_Root {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Module {
    // message fields
    pub field_type: ::protobuf::SingularPtrField<Type>,
    pub providers: ::protobuf::RepeatedField<Provider>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Module {
    fn default() -> &'a Module {
        <Module as ::protobuf::Message>::default_instance()
    }
}

impl Module {
    pub fn new() -> Module {
        ::std::default::Default::default()
    }

    // optional .Type type = 1;


    pub fn get_field_type(&self) -> &Type {
        self.field_type.as_ref().unwrap_or_else(|| <Type as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Type) {
        self.field_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut Type {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> Type {
        self.field_type.take().unwrap_or_else(|| Type::new())
    }

    // repeated .Provider providers = 2;


    pub fn get_providers(&self) -> &[Provider] {
        &self.providers
    }
    pub fn clear_providers(&mut self) {
        self.providers.clear();
    }

    // Param is passed by value, moved
    pub fn set_providers(&mut self, v: ::protobuf::RepeatedField<Provider>) {
        self.providers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_providers(&mut self) -> &mut ::protobuf::RepeatedField<Provider> {
        &mut self.providers
    }

    // Take field
    pub fn take_providers(&mut self) -> ::protobuf::RepeatedField<Provider> {
        ::std::mem::replace(&mut self.providers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Module {
    fn is_initialized(&self) -> bool {
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.providers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.providers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.providers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.providers {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Module {
        Module::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "type",
                |m: &Module| { &m.field_type },
                |m: &mut Module| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Provider>>(
                "providers",
                |m: &Module| { &m.providers },
                |m: &mut Module| { &mut m.providers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Module>(
                "Module",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Module {
        static instance: ::protobuf::rt::LazyV2<Module> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Module::new)
    }
}

impl ::protobuf::Clear for Module {
    fn clear(&mut self) {
        self.field_type.clear();
        self.providers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Module {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Module {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Provider {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    pub field_type: ::protobuf::SingularPtrField<Type>,
    pub dependencies: ::protobuf::RepeatedField<Dependency>,
    field_static: ::std::option::Option<bool>,
    binds: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Provider {
    fn default() -> &'a Provider {
        <Provider as ::protobuf::Message>::default_instance()
    }
}

impl Provider {
    pub fn new() -> Provider {
        ::std::default::Default::default()
    }

    // optional string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .Type type = 2;


    pub fn get_field_type(&self) -> &Type {
        self.field_type.as_ref().unwrap_or_else(|| <Type as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Type) {
        self.field_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut Type {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> Type {
        self.field_type.take().unwrap_or_else(|| Type::new())
    }

    // repeated .Dependency dependencies = 3;


    pub fn get_dependencies(&self) -> &[Dependency] {
        &self.dependencies
    }
    pub fn clear_dependencies(&mut self) {
        self.dependencies.clear();
    }

    // Param is passed by value, moved
    pub fn set_dependencies(&mut self, v: ::protobuf::RepeatedField<Dependency>) {
        self.dependencies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dependencies(&mut self) -> &mut ::protobuf::RepeatedField<Dependency> {
        &mut self.dependencies
    }

    // Take field
    pub fn take_dependencies(&mut self) -> ::protobuf::RepeatedField<Dependency> {
        ::std::mem::replace(&mut self.dependencies, ::protobuf::RepeatedField::new())
    }

    // optional bool static = 4;


    pub fn get_field_static(&self) -> bool {
        self.field_static.unwrap_or(true)
    }
    pub fn clear_field_static(&mut self) {
        self.field_static = ::std::option::Option::None;
    }

    pub fn has_field_static(&self) -> bool {
        self.field_static.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_static(&mut self, v: bool) {
        self.field_static = ::std::option::Option::Some(v);
    }

    // optional bool binds = 5;


    pub fn get_binds(&self) -> bool {
        self.binds.unwrap_or(false)
    }
    pub fn clear_binds(&mut self) {
        self.binds = ::std::option::Option::None;
    }

    pub fn has_binds(&self) -> bool {
        self.binds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_binds(&mut self, v: bool) {
        self.binds = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Provider {
    fn is_initialized(&self) -> bool {
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dependencies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.dependencies)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.field_static = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.binds = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.field_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.dependencies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.field_static {
            my_size += 2;
        }
        if let Some(v) = self.binds {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.dependencies {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.field_static {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.binds {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Provider {
        Provider::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Provider| { &m.name },
                |m: &mut Provider| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Type>>(
                "type",
                |m: &Provider| { &m.field_type },
                |m: &mut Provider| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Dependency>>(
                "dependencies",
                |m: &Provider| { &m.dependencies },
                |m: &mut Provider| { &mut m.dependencies },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "static",
                |m: &Provider| { &m.field_static },
                |m: &mut Provider| { &mut m.field_static },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "binds",
                |m: &Provider| { &m.binds },
                |m: &mut Provider| { &mut m.binds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Provider>(
                "Provider",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Provider {
        static instance: ::protobuf::rt::LazyV2<Provider> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Provider::new)
    }
}

impl ::protobuf::Clear for Provider {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type.clear();
        self.dependencies.clear();
        self.field_static = ::std::option::Option::None;
        self.binds = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Provider {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Provider {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emanifest.proto\"\x85\x02\n\x08Manifest\x12-\n\x0binjectables\x18\
    \x01\x20\x03(\x0b2\x0b.InjectableR\x0binjectables\x12*\n\ncomponents\x18\
    \x02\x20\x03(\x0b2\n.ComponentR\ncomponents\x12#\n\rmerged_crates\x18\
    \x03\x20\x03(\tR\x0cmergedCrates\x12!\n\x07modules\x18\x04\x20\x03(\x0b2\
    \x07.ModuleR\x07modules\x12V\n\x1acomponent_module_manifests\x18\x05\x20\
    \x03(\x0b2\x18.ComponentModuleManifestR\x18componentModuleManifests\"]\n\
    \nInjectable\x12\x14\n\x05crate\x18\x01\x20\x01(\tR\x05crate\x12\x19\n\
    \x04type\x18\x02\x20\x01(\x0b2\x05.TypeR\x04type\x12\x1e\n\x06fields\x18\
    \x03\x20\x03(\x0b2\x06.FieldR\x06fields\"R\n\x05Field\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12\x19\n\x04type\x18\x02\x20\x01(\x0b2\x05\
    .TypeR\x04type\x12\x1a\n\x08injected\x18\x03\x20\x01(\x08R\x08injected\"\
    \x83\x01\n\tComponent\x12\x19\n\x04type\x18\x01\x20\x01(\x0b2\x05.TypeR\
    \x04type\x12+\n\nprovisions\x18\x02\x20\x03(\x0b2\x0b.DependencyR\nprovi\
    sions\x12.\n\x0fmodule_manifest\x18\x03\x20\x01(\x0b2\x05.TypeR\x0emodul\
    eManifest\"\x8b\x01\n\x17ComponentModuleManifest\x12\x19\n\x04type\x18\
    \x01\x20\x01(\x0b2\x05.TypeR\x04type\x124\n\x0fbuilder_modules\x18\x02\
    \x20\x03(\x0b2\x0b.DependencyR\x0ebuilderModules\x12\x1f\n\x07modules\
    \x18\x03\x20\x03(\x0b2\x05.TypeR\x07modules\";\n\nDependency\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12\x19\n\x04type\x18\x02\x20\x01(\
    \x0b2\x05.TypeR\x04type\"\xfe\x01\n\x04Type\x12\x1e\n\x04root\x18\x01\
    \x20\x01(\x0e2\n.Type.RootR\x04root\x12\x12\n\x04path\x18\x02\x20\x01(\t\
    R\x04path\x12\x14\n\x05crate\x18\x03\x20\x01(\tR\x05crate\x12\x19\n\x04a\
    rgs\x18\x04\x20\x03(\x0b2\x05.TypeR\x04args\x12!\n\x0ctrait_object\x18\
    \x05\x20\x01(\x08R\x0btraitObject\x12\x10\n\x03ref\x18\x06\x20\x01(\x08R\
    \x03ref\x12\x1d\n\x06scopes\x18\x07\x20\x03(\x0b2\x05.TypeR\x06scopes\"=\
    \n\x04Root\x12\x0f\n\x0bUNSPECIFIED\x10\0\x12\n\n\x06GLOBAL\x10\x01\x12\
    \t\n\x05CRATE\x10\x02\x12\r\n\tPRIMITIVE\x10\x03\"L\n\x06Module\x12\x19\
    \n\x04type\x18\x01\x20\x01(\x0b2\x05.TypeR\x04type\x12'\n\tproviders\x18\
    \x02\x20\x03(\x0b2\t.ProviderR\tproviders\"\x9e\x01\n\x08Provider\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x19\n\x04type\x18\x02\x20\
    \x01(\x0b2\x05.TypeR\x04type\x12/\n\x0cdependencies\x18\x03\x20\x03(\x0b\
    2\x0b.DependencyR\x0cdependencies\x12\x1c\n\x06static\x18\x04\x20\x01(\
    \x08:\x04trueR\x06static\x12\x14\n\x05binds\x18\x05\x20\x01(\x08R\x05bin\
    ds\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
